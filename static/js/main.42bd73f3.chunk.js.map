{"version":3,"sources":["media/avt.jpg","Project.js","Experience.js","Overview.js","Message.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Project","react_default","a","createElement","index_esm","margin","backgroundColor","width","fontSize","mb","href","bg","mt","Experience","Overview","Message","App","_useState","useState","_useState2","Object","slicedToArray","overview","Setoverview","_useState3","_useState4","project","Setproject","_useState5","_useState6","experience","Setexperience","_useState7","_useState8","message","Setmessage","handleClick","e","elem","target","parentNode","firstChild","classList","add","remove","nextSibling","justifyContent","muted","Container","maxWidth","boxShadow","marginTop","display","src","avt","size","style","flexGrow","height","aria-label","full","Link","id","onClick","selected","src_Project","src_Overview","src_Experience","src_Message","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42bd73f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avt.ee9bae6e.jpg\";","import React, {Component} from 'react';\r\nimport {Avatar,Heading,BorderBox , UnderlineNav, Link,Flex ,Box } from '@primer/components'\r\n\r\n\r\nconst Project = () =>{\r\n\r\n\r\n    return(\r\n\r\n        <BorderBox margin={5} backgroundColor='#f6f8fa' width=\"70%\">\r\n            <Heading fontSize={3} margin={3}> <Link mb={1} href=\"https://github.com\"> Node SSH </Link> </Heading>\r\n            <Box bg=\"white\" p={4} mt={3} mb={5}>ssh client using Node js </Box>\r\n            \r\n        </BorderBox>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Project","import React from 'react'\r\nimport {Avatar,Heading,BorderBox , UnderlineNav, Link,Flex ,Box } from '@primer/components'\r\nfunction Experience() {\r\n    return (\r\n        <BorderBox margin={5} backgroundColor='#f6f8fa' width=\"70%\">\r\n                Experience\r\n        </BorderBox>\r\n    )\r\n}\r\n\r\nexport default Experience\r\n","import React from 'react'\r\nimport {Avatar,Heading,BorderBox , UnderlineNav, Link,Flex ,Box } from '@primer/components'\r\nfunction Overview() {\r\n    return (\r\n\r\n        <BorderBox margin={5} backgroundColor='#f6f8fa' width=\"70%\">\r\n                Overview\r\n        </BorderBox>\r\n    )\r\n}\r\n\r\nexport default Overview\r\n","import React from 'react'\r\nimport {Avatar,Heading,BorderBox , UnderlineNav, Link,Flex ,Box } from '@primer/components'\r\nfunction Message() {\r\n    return (\r\n        <BorderBox margin={5} backgroundColor='#f6f8fa' width=\"70%\">\r\n            Message\r\n        </BorderBox>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React, {Component,useState} from 'react';\nimport {Avatar,Heading,BorderBox , UnderlineNav, Link,Flex ,Box } from '@primer/components'\nimport Container from '@material-ui/core/Container';\nimport Project from './Project'\nimport Experience from './Experience'\nimport Overview from './Overview'\nimport Message from './Message'\n\n\nimport avt from './media/avt.jpg'\n\n\n\n\nconst App = () => {\n\n  \n  const [overview,Setoverview] = useState(false)\n  const [project,Setproject] = useState(true)\n  const [experience,Setexperience] = useState(false)\n  const [message,Setmessage] = useState(false)\n\n  var handleClick= (e) =>{\n    var elem = e.target.parentNode.firstChild\n    e.target.classList.add(\"selected\")\n\n    while(elem){\n      if(elem != e.target){\n        elem.classList.remove(\"selected\")\n      }\n      elem = elem.nextSibling\n    }\n\n    Setoverview(false)\n    Setproject(false)\n    Setexperience(false)\n    Setmessage(false)\n  }\n\n \n  return (\n    <div  >\n    \n    <BorderBox bg='.bg-blue-light' >\n      <Flex justifyContent ='flex-end' >\n            <Link margin={3} href=\"https://github.com\"   muted={true} > Me </Link>\n          <Link margin={3}  href=\"https://github.com\"    muted={true}  > CV </Link>\n          <Link margin={3}  href=\"https://github.com\"    muted={true}  > 符号链接-SoftLink </Link>\n      </Flex>\n\n    </BorderBox >\n\n\n    <Container maxWidth=\"lg\">\n\n    <Flex>\n      \n    \n   <div >\n    <BorderBox boxShadow ='box-shadow p-3' marginTop ={5} display={'inline-block'} >\n      <Avatar mb={4} src= {avt} size={200} margin={20}  />\n      <Heading fontSize={3} mb={2}  margin={30}  >YuanZheng Hu</Heading>\n    </BorderBox>\n    </div>\n\n    <div style={{flexGrow:1, height: \"max-content\" }}>\n\n    <UnderlineNav aria-label=\"Main\"  margin={5} full={true}  >\n    \n      <UnderlineNav.Link href=\"#Overview\" id=\"overview\" onClick={(e)=> {handleClick(e); Setoverview(true)} } selected={true}>  Overview </UnderlineNav.Link>\n      <UnderlineNav.Link href=\"#Projects\" id=\"projects\" onClick={(e)=> {handleClick(e); Setproject(true)}}  selected={false} >Projects</UnderlineNav.Link>\n      <UnderlineNav.Link href=\"#Experience\" id =\"experience\" onClick={(e)=> {handleClick(e); Setexperience(true) }} selected={false}>Co-op Experience</UnderlineNav.Link>\n      <UnderlineNav.Link href=\"#Message\" id=\"message\" onClick={(e)=> {handleClick(e); Setmessage(true)}} selected={false}>Message Me</UnderlineNav.Link>\n      \n    </UnderlineNav>\n\n    <div>\n\n    {project && <Project/>}\n    {overview && <Overview />}\n    {experience && <Experience/>}\n    {message && <Message/>}\n\n\n\n    </div>\n\n\n    </div>\n\n    <div>\n      \n    </div>\n    </Flex>\n    </Container>\n\n  </div>\n\n  )\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}